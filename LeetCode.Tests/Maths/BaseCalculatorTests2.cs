﻿using System;
using NUnit.Framework;
using LeetCode.Maths;
using System.Text;
using System.Collections;
using System.Collections.Generic;

namespace LeetCode.Tests.Maths
{
    [TestFixture]
    public class BaseCalculatorTests2
    {
        [TestCase]
        public void TestCase()
        {
            var calc = new BaseCalculator2();
            calc.Calculate("0-2147483648");
            //calc.Calculate("(   3   +  (   (  (( (   (  ( ( (8  +   10)  + 12 )-(  (  3* 6   )*   ( 14 -16 ) ) ) -(((   1   +  19)   /(10+   18   )  )  - ((  12   *1 )  +  (2   +  19)) ) )+( ((  15  -  (20/ 8  )   ) +   (( 17 +  8  )  +  (   20  +10) )   )+   (   ((  16+  5  )*   (  11   - 14   ))+  ((  2-  12  )-(   8 -10   ))  )))  *   (   ((  (  ( 8+ 15   ) +  (  7 +  4)  ) +   ( (   4   +  2  )   + (  4   +1   )  )   )  /  1 ) + (((  (  14 + 19   )   -  2 )   -  14) * (  (   (   13  - 5   )   /4 )  *   ( 11  -   (  7+ 1 )   )  ) )   ) )   / 18  )  +(( ((   (7  + (  12   -  (  14+   10)) )+20  )  *  ( 15 /18 ))+ (  (   (   ( (   15+ 16 )  -( 17+7  ) )+   (  17/   (   18* 7   )   )   )  + (  (  (   1 +20 ) + 16   ) *  (  (  4   +17   )   +(   13  *   8  ) )   )   )/   (   (   11*18)   +(( ( 19  + 14   )-(11  *   11 )  )   +  11)   )) )   *   ( ( 15  -(  20  * (  ( (   1/17   )  -  20)   *( (9 * 3)   -( 14  +   12 )   ))) )+(  ((   (  (   3   + 3)-  ( 10  /  5   ) )  /5)  * (  (  (20 +   10)  +   (3 * 7  ) )*   6   )  )+   (((   (15+  17)/   ( 6   +  2   )   ) -   ((  20 *13  )-   7   )   )+ (  (  (13   +   14 )  *   (  4   +   7))+((12 +16   )-  (9+ 4   )   ) ) )   )  )  ) ) *   ( (  18 + ((   ( (  (   (   16 +   12   ) + ( 5   *9) ) /(   (  1- 7) +   (   15  + 18   )  )   )   +(3   +( (9   -   15 ) + (8+  13 )  )  )  )+( (  ( (   20+  2   ) -  ( 10 +5   )  )+  (  ( 1  /12 )+   ( 14  * 18  )  )   )  *   ((   (   5+2  )  +(  8 *   12   ))  +  (  (   9+7 ) +   16 )  )  )   )   +  (( (( 3  + (  12  +   16  )   ) +  (( 13  * 10)* 18)  ) +(  4   /   (  (  4 + 8 )   * (17  *2 ) )) )+ (( (8+ (  1-10) )*(   1   * ( 7 *15  ) )  )   *(  ((  4 + 9 )-   20 )   *4  )   )  ) ) )   *((  (   ( ((   (   2*  8) *   (9   /  10)   )  +   ( ( 7 +  13 )* (   12 *2  ) ))/   ( ( ( 15  *  11)  *   (17  *20   )   )+ (  11- ( 4  -  16  )   )   )  ) * (  (   ( (   12 *  16)  +  ( 17 + 4  ) ) + ( (13  -  2  )   +   (   20   + 3   )   )   )*  (((  13*  9)   + (  5 +5 )) +(  (   15-   5 ) -( 19*   12  ) )   )  ))*   ((( (   ( 17  -  10 )*  (   18  +8   ) )/ 17)  + (( (   10  +   19  ) +   14   )   /(   (   10-7 )  *(   18   /10 ))))   *   ((  ( (   12- 8  )   +  (  2+8   ))   / (  ( 10  + 15 )/(11  -5   ))   ) -  ((   (  9   * 18 )+  ( 12* 13 )  )  /   (  (19* 5  )/(  3 + 6 ))  ))   ))  *  ((   ( ( ((19+  18 ) *  (   4  +  12) )  +  ((  20   +   5 ) +(13  -  7) ))   +   (7   +(  (  13* 11) *  (2+  4  )) ) )-(  ( (  12-( 8+ 17)  )+ ((  11 +   9   ) *   (  1  +  14   ))  )   / ( (( 10+13 )+(   14 *  11   )  )  +( (17   +   4)   *(  5+   8 )  ) )  ) )  * ( ((  5 +   (  (   12  +   14   )+   (  13   +  4)  ) )  +  (  17* (  (9   +  3)  +   (   18 -7) )) ) * ( ( ((  4   *  20) +(   1 + 13  ) )- ((  20  -  15 )  * (  3* 8 ))   )+(  ( (   20 +13   ) + (4   -  4) )   +   12 )))   ))   ) )  )");
            calc.Calculate("(   (  (7  * ((  ((19  *(  ((19  *   20 )  *  16  )   +(   (13  -   18   )  + (12   * 5 )   )  ) )  +   (  (  ( ( 14 + 17   ) /  (14 * 9)) +   16 ) + ( (( 15   / 3  )+   ( 2-   9   )  )   *  (  (   4 - 5   )  -  (15  +6   ) )   )   ))/   ((  ((( 17  /   20 ) +   (11 *17  ))/ (   (4 +  6 )+(   3  -  5   )) )   -(17/( ( 7   +   20  )+(   20   * 20  )  )  )) +   (   9   +  (((14+   4 )  +  (   12+13 )) * (   (7   /1 )+(   6+   12   ) ) ))  ) )-( (( 5 -  18 ) *  (  14*  (  (   (   7 +2  )/  (   8   -   6 )) -(( 14  +  10)+(  20   -6  )   ))) )  /( (   ((  ( 12   *   9)  +   (   5+ 1) ) + ((   19   +  2   )*   (3*18))   ) + (   ((  5*  11  )  +  ( 4  /15  )   )  *  ( (   5 -  2 )   *   (11 * 5   )) )  )-  (((   ( 17 /  17 ) /( 5+  16   )) +   ((  5   - 3 )  +  (  20 / 20))   ) * (   ((  7/ 17)  -(   14 -  19) )   +  ((16+12  ) *  12)   ))   )   )  )   )   *  (((  (  ( 18  +(  ( (   11 +11  )/   (  13 + 12)  ) * (   (1 * 5) *   ( 16   *17) )   ))-(  ( ((19  - 12   )+ (   13  +  18  )  )+   (   11+  ( 7 + 16 )  )   )  +(   (13+  (13  / 15  ))   /  (  (   18  -   2  ) - (4   + 7   )   )))) *  (( (  (   ( 8 *4  )   +(14   + 11 )   )-   ((   11  +  15)  - (2  -14 ) ) ) +(( 12/  ( 9  + 10 )   )  -  ( (6   - 17  )  -   ( 6+   17   ) )   ))  *   (  (  (  5-  (  9 +  20  ) )   +  (   (   20 -  6 )   -(4 -5  )   ))  -   (  (  (   15 *   11) +  ( 14+ 10) )  +(  ( 16 /  20   )  +  ( 18-   9   )   )   )  )  ))+   (   (   ((  ((   1 +   19) /  (   9 *  3  )  )  +(   (   5   / 1) +   (   6+  15 )   ) )   +( (  ( 19- 15  )   +  (  3  -5 ) )   +   (   (   12  * 20 ) +(15 *12   )  ))  ) -12  )   +  (  (   ( ((   12 -8  ) +(   11 *19)) + 8   )-   (  (   (5-14   ) +   ( 5 +  6  ) ) +((  3 /   15   )  -( 5   +6   )   )   ))  - ((( ( 16   *  12 )* 1  )  -  (   (1+   20)   -   (  12 + 1) ))  + 20)   )   ) )   +(  (  14* (  (   (   ((   14   +  6)  +(  3   +  20  )   ) +( (7+   18   )  -   (18 -   12)) )   +  1   )* ((((  16  *  11   )  +10 )   * ( (  9+   10 )   -  15)  )  +( ( ( 5   +18  ) + (   14   -   4  )   ) +   (   9  *  (16*7   ) )  ))   ))  /   ((   ((  (   (  15 *   11 )+   ( 3   + 20  )  )  -(  (   19+  19)  +   12 )   )  *   (  (  (   7*   16 ) *   ( 7 +3 ) ) + (   (   2+  6 )  + (18  +15   )  ) )   )  +   (   ((   ( 13+  17  ) / ( 5 *  15   ) )*(   ( 16   +11)   *   (   9+15   ) ))  +  ( ((   14+7   )  /(  4  +  8))  +16)  )   )-(  ((( (3 + 13 )   +  (  20   +18  ) )+ (  (   12+ 8   )  +(   19   *  3   )  )  )  /(  (   (  1   - 16)+20   )  *(   (   16-13) *  (   9  /3)  ))) -(   (  5+   (  (  19+ 7  )   - ( 20   - 19   ) ))  -   2  ) )   )  )  )   ) + (   5+   (  (  (   (  ( ( (  (  18/   1)-   (   16 + 11   )   )  + (  (  3 +  11  )  +20) )   + (  (   (13+  9  )+( 14  -  20 )) +   (   (5  -9 )  - (   8*9  ) ) ) )  + ((   ((  14   -7) + ( 3  + 5   )   )  -  ((  10  -16  )  +( 13- 19   )))  -  11  )   ) + (   3/   (  (  ((18 + 19 )   *  10 )+   (   (   5   +   6)  -  ( 16  +6  )   ))/  (  (  (14  -  16  )   -  (  17- 8   )   )  +  ( (  3 +   14  )   +(  5   +8   )) )   )   )  )   * ( (   (   (   (  (  15+9 )   -  (9-1  )   )  *   (   (  6- 4 ) -( 12/2  )  )   ) + ( (   15/(15+ 17   )   )  +   (   (   11 + 1) + (   14  +  2 ))) )   -  ( ( ( 8   * 14 ) *   (( 14   +8)   *  (6 +   3)   )   )   *  ((  ( 13-10  )  *  (   1  * 7 ) )   +  (  (  20 +20 )   *   (  4   / 13) )  )   )   ) +  (   ( (  (  (  4   *14   )   /  (13   /  6) )  *  ( (  12 *   8)   +  (   5   +  16) )  ) * ( ( (   1  + 15   )   +( 13 /6   ) ) +  ( ( 5*  1  )/   (  18  -  13  )   )))   - ((  ( (  7   *   10 )  - ( 4  *  8   ))   + ((  20 + 16   )   +(9  /10  ))   )-   (( (   1   -8  )+   ( 14   +  7   )  )   + (  (15+  10  )-  (16+   19 ))   )  )  ))  ) +  (  (   12   - (   ( 1 + ( ((  2 +  5  ) -  (   12   -  2)  )+(   1 +  (10*  14  ) ) ))  +   ( ((  ( 3   + 5)-(   19   -   18 )   )   +  ( (   5+2   ) / 5)   )+  (   ( (   6  +7 )-( 15 + 11  )  ) +  ( (  11   -5)  +   (   3+  2   ))  )  )))   *(  (  (  ( (   5 +  (  3   -   1   )  )   -(  (10 / 2   )+   16  )   )+ 10  )  *(7  *   ((( 20  +  3   )   / (   12  +  9  )  )  +   (   (  11+  8   )+ (   6  + 11   )  )  )  )   )   -(  (   11*(( (   7  /   11 )  +  (3   +9 )  )  -  (  (19*14)  + (   3   / 1 )) )   )   +  (  (   (9   *(   18 /   8   ))  +   ((   15   +   10  )  +  (   15  /11) )  )  +(18 *  (   (14/  2   )   -(   13/12)  )) ))   ) ) )  ) )");
            Assert.AreEqual(10, calc.Calculate("(3+2)*2"));
            Assert.AreEqual(-5, calc.Calculate("5 - (3 + 2 ) * 2  "));
            Assert.AreEqual(15, calc.Calculate("5 - (3 + 2 ) * 2 * (-1) "));
            Assert.AreEqual(-15, calc.Calculate("5 - (3 + 2 ) * 2 *(1+1) "));
            Assert.AreEqual(-8, calc.Calculate("5 - ((3 -1)* 2 ) - (2 +1)*3  "));
            var str = new StringBuilder();
            var op = new char[4] { '-', '+', '*', '/' };
            var r = new Random();
            for (int i = 0; i < 100000;i++){
                str.Append(1+r.Next(9));
                str.Append(op[r.Next(4)]);
            }
            var h = new Hashtable();
            str.Remove(str.Length - 1,1);
            Assert.IsNotNull(calc.Calculate(str.ToString()));
        }
    }
}
